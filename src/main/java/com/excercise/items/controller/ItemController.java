package com.excercise.items.controller;import com.excercise.items.dao.ItemDao;import com.excercise.items.model.Item;import java.util.List;import java.util.Optional;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.DeleteMapping;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.PutMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestController@RequestMapping("")public class ItemController {  @Autowired  ItemDao itemDao;  @GetMapping("/items")  public ResponseEntity<Object> listItems(){    List<Item> items = itemDao.findAll();    return items.isEmpty() ?        new ResponseEntity<>(HttpStatus.NO_CONTENT) :        new ResponseEntity<>(items, HttpStatus.OK);  }  @GetMapping("/items/{id}")  public ResponseEntity<Object> getItemById(@PathVariable("id")long id) {    Optional<Item> item = itemDao.findById(id);    return item.isPresent() ?        new ResponseEntity<>(item.get(), HttpStatus.OK) :        new ResponseEntity<>("Item not found.", HttpStatus.NOT_FOUND);  }  @PostMapping("/items")  public ResponseEntity<Item> createItem(@RequestBody Item item) {    long timeStamp = System.currentTimeMillis();    Item createdItem = new Item(item.getValue(), item.getTags());    createdItem.setRevision(0);    createdItem.setCreatedTs(timeStamp);    createdItem.setModifiedTs(timeStamp);    try {      Item savedItem = itemDao.save(createdItem);      return new ResponseEntity<>(savedItem, HttpStatus.OK);    } catch (Exception e) {      return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);    }  }  @PutMapping("/items")  public ResponseEntity<Object> updateItem(@RequestBody Item item) {    Optional<Item> optionalItem = itemDao.findById(item.getId());    if (!optionalItem.isPresent()) {      return new ResponseEntity<>("Item not found.", HttpStatus.NOT_FOUND);    }    Item updatedItem = optionalItem.get();    if(item.getRevision() != updatedItem.getRevision()) {      return new ResponseEntity<>("Invalid revision.", HttpStatus.BAD_REQUEST);    }    long timeStamp = System.currentTimeMillis();    updatedItem.setRevision(item.getRevision() + 1);    updatedItem.setModifiedTs(timeStamp);    updatedItem.setValue(item.getValue());    updatedItem.setTags(item.getTags());    try {      Item savedItem = itemDao.save(updatedItem);      return new ResponseEntity<>(savedItem, HttpStatus.OK);    } catch (Exception e) {      return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);    }  }  @DeleteMapping("/items/{id}")  public ResponseEntity<HttpStatus> deleteItem(@PathVariable("id")long id) {    try {      itemDao.deleteById(id);      return new ResponseEntity<>(HttpStatus.NO_CONTENT);    } catch (Exception e) {      return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);    }  }}